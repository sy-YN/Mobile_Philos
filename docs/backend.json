{
  "entities": {
    "Workspace": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Workspace",
      "type": "object",
      "description": "Represents a development workspace.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Workspace entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the workspace."
        },
        "gitRepoUrl": {
          "type": "string",
          "description": "The URL of the Git repository associated with the workspace.",
          "format": "uri"
        },
        "creationDate": {
          "type": "string",
          "description": "The date and time the workspace was created.",
          "format": "date-time"
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "The date and time the workspace was last modified.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Workspace)"
        }
      },
      "required": [
        "id",
        "name",
        "gitRepoUrl",
        "creationDate",
        "lastModifiedDate",
        "userId"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the GitSpace application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "username": {
          "type": "string",
          "description": "The user's username."
        },
        "creationDate": {
          "type": "string",
          "description": "The date and time the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "username",
        "creationDate"
      ]
    },
    "Comment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Comment",
      "type": "object",
      "description": "Represents a comment on a file within a workspace.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Comment entity."
        },
        "text": {
          "type": "string",
          "description": "The text content of the comment."
        },
        "creationDate": {
          "type": "string",
          "description": "The date and time the comment was created.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Comment)"
        },
        "workspaceId": {
          "type": "string",
          "description": "Reference to Workspace. (Relationship: Workspace 1:N Comment)"
        },
        "filePath": {
          "type": "string",
          "description": "The path to the file the comment is associated with."
        }
      },
      "required": [
        "id",
        "text",
        "creationDate",
        "userId",
        "workspaceId",
        "filePath"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Path-based ownership ensures only the user can access their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/workspaces/{workspaceId}",
        "definition": {
          "entityName": "Workspace",
          "schema": {
            "$ref": "#/backend/entities/Workspace"
          },
          "description": "Stores workspaces owned by the user. Uses path-based ownership to simplify security rules. The `userId` field within the Workspace document is redundant but included for clarity and potential future use cases.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the workspace."
            },
            {
              "name": "workspaceId",
              "description": "The unique identifier of the workspace."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/workspaces/{workspaceId}/comments/{commentId}",
        "definition": {
          "entityName": "Comment",
          "schema": {
            "$ref": "#/backend/entities/Comment"
          },
          "description": "Stores comments associated with a specific workspace. Path-based ownership ensures only the user who owns the workspace can manage comments. Denormalizes 'workspaceId' and 'userId' from the parent 'workspace' document for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the workspace."
            },
            {
              "name": "workspaceId",
              "description": "The unique identifier of the workspace to which the comment belongs."
            },
            {
              "name": "commentId",
              "description": "The unique identifier of the comment."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, clarity, and scalability. It leverages path-based ownership for user-related data and denormalization to avoid complex security rules. Comments are structured as subcollections under workspaces, ensuring easy access control and scalability.\n\nAuthorization Independence is achieved by storing comments under the workspaces and using the workspace's `userId` as the owner. This design avoids the need for `get()` calls in security rules to validate ownership.\n\nQAPs (Rules are not Filters) are supported through structural segregation. Each collection and subcollection has a clear security posture. List operations are secured by ensuring that users can only access workspaces they own and comments associated with those workspaces.  Comments are stored as a subcollection to prevent collection group queries from being used to list across workspaces."
  }
}